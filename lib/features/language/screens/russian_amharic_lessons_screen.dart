import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:tourist_assistive_app/features/language/models/comprehensive_lesson_model.dart' as lesson_model;

class RussianAmharicLessonsScreen extends ConsumerStatefulWidget {
  const RussianAmharicLessonsScreen({super.key});

  @override
  ConsumerState<RussianAmharicLessonsScreen> createState() => _RussianAmharicLessonsScreenState();
}

class _RussianAmharicLessonsScreenState extends ConsumerState<RussianAmharicLessonsScreen>
    with TickerProviderStateMixin {
  late AnimationController _fadeController;
  late AnimationController _slideController;
  List<lesson_model.Lesson> _lessons = [];
  bool _isLoading = true;
  lesson_model.LanguageLevel _selectedLevel = lesson_model.LanguageLevel.beginner;

  @override
  void initState() {
    super.initState();
    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _slideController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _loadLessons();
    _fadeController.forward();
    _slideController.forward();
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _slideController.dispose();
    super.dispose();
  }

  void _loadLessons() {
    Future.delayed(const Duration(milliseconds: 500), () {
      setState(() {
        _lessons = _generateRussianLessons(_selectedLevel);
        _isLoading = false;
      });
    });
  }

  void _changeLevel(lesson_model.LanguageLevel level) {
    setState(() {
      _selectedLevel = level;
      _isLoading = true;
    });
    _loadLessons();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFF1A1A1A),
      appBar: _buildAppBar(),
      body: SafeArea(
        child: _isLoading
            ? const Center(
                child: CircularProgressIndicator(
                  color: Color(0xFF58CC02),
                ),
              )
            : SingleChildScrollView(
                physics: const BouncingScrollPhysics(),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildHeader(),
                      const SizedBox(height: 24),
                      _buildLevelSelector(),
                      const SizedBox(height: 24),
                      _buildProgressOverview(),
                      const SizedBox(height: 24),
                      _buildLessonsList(),
                      const SizedBox(height: 100),
                    ],
                  ),
                ),
              ),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      backgroundColor: const Color(0xFF1A1A1A),
      elevation: 0,
      leading: IconButton(
        icon: const Icon(Icons.arrow_back, color: Colors.white),
        onPressed: () => context.go('/language'),
      ),
      title: const Text(
        'üá∑üá∫ –†—É—Å—Å–∫–∏–π ‚Üí Amharic',
        style: TextStyle(
          color: Colors.white,
          fontSize: 18,
          fontWeight: FontWeight.bold,
        ),
      ),
      actions: [
        IconButton(
          icon: const Icon(Icons.settings, color: Colors.white),
          onPressed: () => _showSettings(),
        ),
      ],
    );
  }

  Widget _buildHeader() {
    final completedLessons = _lessons.where((l) => l.isCompleted).length;
    final totalLessons = _lessons.length;
    final progress = totalLessons > 0 ? completedLessons / totalLessons : 0.0;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '–ò–∑—É—á–µ–Ω–∏–µ –∞–º—Ö–∞—Ä—Å–∫–æ–≥–æ —Å —Ä—É—Å—Å–∫–æ–≥–æ',
          style: TextStyle(
            color: Colors.white,
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          'Learn Amharic from Russian',
          style: TextStyle(
            color: Colors.white.withValues(alpha: 0.7),
            fontSize: 16,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          '${_selectedLevel.name.toUpperCase()} Level ‚Ä¢ ${_lessons.length} –£—Ä–æ–∫–æ–≤ ‚Ä¢ 400+ –ú–∏–Ω—É—Ç',
          style: TextStyle(
            color: Colors.white.withValues(alpha: 0.7),
            fontSize: 14,
          ),
        ),
        const SizedBox(height: 16),
        Container(
          height: 8,
          decoration: BoxDecoration(
            color: const Color(0xFF2A2A2A),
            borderRadius: BorderRadius.circular(4),
          ),
          child: FractionallySizedBox(
            alignment: Alignment.centerLeft,
            widthFactor: progress,
            child: Container(
              decoration: BoxDecoration(
                color: const Color(0xFFCE82FF),
                borderRadius: BorderRadius.circular(4),
              ),
            ),
          ),
        ),
        const SizedBox(height: 8),
        Text(
          '$completedLessons –∏–∑ $totalLessons —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
          style: TextStyle(
            color: Colors.white.withValues(alpha: 0.7),
            fontSize: 14,
          ),
        ),
      ],
    ).animate().fadeIn(duration: 800.ms).slideY(begin: 0.3, end: 0);
  }

  Widget _buildLevelSelector() {
    return Container(
      padding: const EdgeInsets.all(4),
      decoration: BoxDecoration(
        color: const Color(0xFF2A2A2A),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: lesson_model.LanguageLevel.values.map((level) {
          final isSelected = level == _selectedLevel;
          return Expanded(
            child: GestureDetector(
              onTap: () => _changeLevel(level),
              child: Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                decoration: BoxDecoration(
                  color: isSelected ? const Color(0xFFCE82FF) : Colors.transparent,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  level.name.toUpperCase(),
                  style: TextStyle(
                    color: isSelected ? Colors.white : Colors.white70,
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          );
        }).toList(),
      ),
    ).animate().fadeIn(duration: 1000.ms).slideX(begin: 0.3, end: 0);
  }

  Widget _buildProgressOverview() {
    final completedLessons = _lessons.where((l) => l.isCompleted).length;
    final totalXP = _lessons.fold(0, (sum, lesson) => sum + lesson.xpReward);
    final earnedXP = _lessons.where((l) => l.isCompleted).fold(0, (sum, lesson) => sum + lesson.xpReward);
    final totalMinutes = _lessons.fold(0, (sum, lesson) => sum + lesson.estimatedMinutes);

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: const Color(0xFF2A2A2A),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: const Color(0xFFCE82FF).withValues(alpha: 0.3),
          width: 1,
        ),
      ),
      child: Row(
        children: [
          Expanded(
            child: _buildStatItem(
              '–£—Ä–æ–∫–∏',
              '$completedLessons/${_lessons.length}',
              Icons.school,
              const Color(0xFFCE82FF),
            ),
          ),
          Container(
            width: 1,
            height: 40,
            color: Colors.white.withValues(alpha: 0.2),
          ),
          Expanded(
            child: _buildStatItem(
              '–û–ü',
              '$earnedXP/$totalXP',
              Icons.star,
              const Color(0xFFFFD700),
            ),
          ),
          Container(
            width: 1,
            height: 40,
            color: Colors.white.withValues(alpha: 0.2),
          ),
          Expanded(
            child: _buildStatItem(
              '–í—Ä–µ–º—è',
              '${totalMinutes}–º–∏–Ω',
              Icons.access_time,
              const Color(0xFF58CC02),
            ),
          ),
        ],
      ),
    ).animate().fadeIn(duration: 1000.ms).slideX(begin: 0.3, end: 0);
  }

  Widget _buildStatItem(String label, String value, IconData icon, Color color) {
    return Column(
      children: [
        Icon(
          icon,
          color: color,
          size: 24,
        ),
        const SizedBox(height: 8),
        Text(
          value,
          style: TextStyle(
            color: color,
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          label,
          style: const TextStyle(
            color: Colors.white70,
            fontSize: 12,
          ),
        ),
      ],
    );
  }

  Widget _buildLessonsList() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '–£—Ä–æ–∫–∏ –†—É—Å—Å–∫–∏–π ‚Üí –ê–º—Ö–∞—Ä—Å–∫–∏–π',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        ..._lessons.asMap().entries.map((entry) {
          final index = entry.key;
          final lesson = entry.value;
          return _buildLessonCard(lesson, index);
        }).toList(),
      ],
    );
  }

  Widget _buildLessonCard(lesson_model.Lesson lesson, int index) {
    final isUnlocked = true; // All lessons are unlocked
    final isCompleted = lesson.isCompleted;
    
    Color backgroundColor = const Color(0xFF2A2A2A);
    Color borderColor = const Color(0xFF2A2A2A);
    
    if (isCompleted) {
      backgroundColor = const Color(0xFF58CC02);
      borderColor = const Color(0xFF58CC02);
    } else if (isUnlocked) {
      backgroundColor = const Color(0xFFCE82FF).withValues(alpha: 0.1);
      borderColor = const Color(0xFFCE82FF).withValues(alpha: 0.3);
    } else {
      backgroundColor = const Color(0xFF1A1A1A);
      borderColor = const Color(0xFF2A2A2A);
    }

    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: GestureDetector(
        onTap: isUnlocked ? () => _startLesson(lesson) : null,
        child: Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: backgroundColor,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: borderColor, width: 2),
            boxShadow: [
              BoxShadow(
                color: borderColor.withValues(alpha: 0.1),
                blurRadius: 8,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Row(
            children: [
              Container(
                width: 50,
                height: 50,
                decoration: BoxDecoration(
                  color: isUnlocked ? const Color(0xFFCE82FF) : const Color(0xFF2A2A2A),
                  borderRadius: BorderRadius.circular(25),
                ),
                child: isCompleted
                    ? const Icon(
                        Icons.check,
                        color: Colors.white,
                        size: 24,
                      )
                    : isUnlocked
                        ? Text(
                            '${index + 1}',
                            style: const TextStyle(
                              color: Colors.white,
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          )
                        : const Icon(
                            Icons.lock,
                            color: Colors.white54,
                            size: 24,
                          ),
              ),
              
              const SizedBox(width: 16),
              
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      lesson.title,
                      style: TextStyle(
                        color: isUnlocked ? Colors.white : Colors.white54,
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 4),
                    Text(
                      lesson.description,
                      style: TextStyle(
                        color: isUnlocked ? Colors.white70 : Colors.white38,
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        _buildLessonStat(
                          '${lesson.estimatedMinutes} –º–∏–Ω',
                          Icons.access_time,
                          isUnlocked,
                        ),
                        const SizedBox(width: 12),
                        _buildLessonStat(
                          '${lesson.exercises.length} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π',
                          Icons.quiz,
                          isUnlocked,
                        ),
                        const SizedBox(width: 12),
                        _buildLessonStat(
                          '${lesson.xpReward} –û–ü',
                          Icons.star,
                          isUnlocked,
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              
              if (isUnlocked && !isCompleted)
                Container(
                  width: 40,
                  height: 40,
                  decoration: BoxDecoration(
                    color: const Color(0xFFCE82FF).withValues(alpha: 0.2),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Center(
                    child: Text(
                      '${(lesson.progress * 100).toInt()}%',
                      style: const TextStyle(
                        color: Color(0xFFCE82FF),
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                )
              else if (isCompleted)
                const Icon(
                  Icons.check_circle,
                  color: Color(0xFF58CC02),
                  size: 24,
                )
              else
                const Icon(
                  Icons.lock,
                  color: Colors.white54,
                  size: 24,
                ),
            ],
          ),
        ),
      ),
    ).animate(delay: (index * 100).ms)
        .fadeIn(duration: 600.ms)
        .slideX(begin: 0.3, end: 0);
  }

  Widget _buildLessonStat(String text, IconData icon, bool isUnlocked) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Icon(
          icon,
          color: isUnlocked ? Colors.white70 : Colors.white38,
          size: 14,
        ),
        const SizedBox(width: 4),
        Text(
          text,
          style: TextStyle(
            color: isUnlocked ? Colors.white70 : Colors.white38,
            fontSize: 12,
          ),
        ),
      ],
    );
  }

  void _startLesson(lesson_model.Lesson lesson) {
    context.push(
      '/language/amharic/lesson/${lesson.id}?native=Russian',
    );
  }

  void _showSettings() {
    showModalBottomSheet(
      context: context,
      backgroundColor: const Color(0xFF2A2A2A),
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      builder: (context) => Container(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Text(
              '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
              style: TextStyle(
                color: Colors.white,
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 24),
            
            _buildSettingItem(
              icon: Icons.volume_up,
              title: '–ê—É–¥–∏–æ',
              subtitle: '–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã',
              onTap: () {},
            ),
            
            _buildSettingItem(
              icon: Icons.notifications,
              title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
              subtitle: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
              onTap: () {},
            ),
            
            _buildSettingItem(
              icon: Icons.help_outline,
              title: '–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
              subtitle: '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º',
              onTap: () {},
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSettingItem({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    return ListTile(
      leading: Icon(icon, color: const Color(0xFFCE82FF)),
      title: Text(
        title,
        style: const TextStyle(color: Colors.white),
      ),
      subtitle: Text(
        subtitle,
        style: const TextStyle(color: Colors.white70),
      ),
      onTap: onTap,
    );
  }

  List<lesson_model.Lesson> _generateRussianLessons(lesson_model.LanguageLevel level) {
    switch (level) {
      case lesson_model.LanguageLevel.beginner:
        return _generateRussianBeginnerLessons();
      case lesson_model.LanguageLevel.elementary:
        return _generateRussianBeginnerLessons(); // Use beginner lessons for elementary
      case lesson_model.LanguageLevel.intermediate:
        return _generateRussianIntermediateLessons();
      case lesson_model.LanguageLevel.advanced:
        return _generateRussianAdvancedLessons();
    }
  }

  List<lesson_model.Lesson> _generateRussianBeginnerLessons() {
    // Generate 100 beginner lessons efficiently in Russian
    final List<Map<String, dynamic>> lessonTemplates = [
      {
        'title': '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        'description': '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–û—Å–Ω–æ–≤—ã',
        'vocabulary': ['·à∞·àã·àù', '·ä•·äï·ã¥·âµ ·äì·âΩ·àÅ', '·ä•·äï·ã∞·àù·äï ·ä†·àà', '·â≥·ã≤·ã´·àµ', '·ä•·äï·ã∞·àù·äï ·ä†·àà·âΩ', '·â†·å£·àù ·ã∞·àÖ·äì', '·ä†·àò·à∞·åç·äì·àà·àÅ', '·ã≠·âÖ·à≠·â≥'],
        'exerciseGenerator': _generateGreetingExercises,
      },
      {
        'title': '–ß–∏—Å–ª–∞ 1-10',
        'description': '–ù–∞—É—á–∏—Ç–µ—Å—å —Å—á–∏—Ç–∞—Ç—å –æ—Ç 1 –¥–æ 10 –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ß–∏—Å–ª–∞',
        'vocabulary': ['·ä†·äï·ãµ', '·àÅ·àà·âµ', '·à∂·àµ·âµ', '·ä†·à´·âµ', '·ä†·àù·àµ·âµ', '·àµ·ãµ·àµ·âµ', '·à∞·â£·âµ', '·àµ·àù·äï·âµ', '·ãò·å†·äù', '·ä†·àµ·à≠'],
        'exerciseGenerator': _generateNumberExercises,
      },
      {
        'title': '–ß–ª–µ–Ω—ã —Å–µ–º—å–∏',
        'description': '–ò–∑—É—á–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–°–µ–º—å—è',
        'vocabulary': ['·ä†·â£·âµ', '·ä•·äì·âµ', '·ãà·äï·ãµ·àù', '·ä•·àÖ·âµ', '·àç·åÖ', '·ãà·àã·åÖ', '·ä†·ã´·âµ', '·ä†·ã´·âµ'],
        'exerciseGenerator': _generateFamilyExercises,
      },
      {
        'title': '–¶–≤–µ—Ç–∞',
        'description': '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–¶–≤–µ—Ç–∞',
        'vocabulary': ['·âÄ·ã≠', '·äê·å≠', '·å•·âÅ·à≠', '·â¢·å´', '·ä†·à®·äï·åì·ã¥', '·à∞·àõ·ã´·ãä', '·âÄ·àà·àù', '·å•·âÅ·à≠'],
        'exerciseGenerator': _generateColorExercises,
      },
      {
        'title': '–ï–¥–∞ –∏ –Ω–∞–ø–∏—Ç–∫–∏',
        'description': '–ò–∑—É—á–∏—Ç–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –æ –µ–¥–µ –∏ –Ω–∞–ø–∏—Ç–∫–∞—Ö –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ï–¥–∞',
        'vocabulary': ['·ãç·àÉ', '·ä•·äï·åÄ·à´', '·â°·äì', '·â†·à≠·â†·à¨', '·àµ·åã', '·ãà·â∞·âµ', '·âÖ·àò·àù', '·å£·ãï·àù'],
        'exerciseGenerator': _generateFoodExercises,
      },
      {
        'title': '–ß–∞—Å—Ç–∏ —Ç–µ–ª–∞',
        'description': '–ò–∑—É—á–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞ –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–¢–µ–ª–æ',
        'vocabulary': ['·ä•·åÖ', '·ä•·åç·à≠', '·ä†·ã≠·äï', '·ä†·çç', '·ä†·ãï·àù·àÆ', '·àç·â•', '·åÜ·àÆ', '·ä†·çç·äï·å´'],
        'exerciseGenerator': _generateBodyPartExercises,
      },
      {
        'title': '–ñ–∏–≤–æ—Ç–Ω—ã–µ',
        'description': '–ò–∑—É—á–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ñ–∏–≤–æ—Ç–Ω—ã–µ',
        'vocabulary': ['·ãç·àª', '·ãµ·à≠', '·ä†·àÖ·ã´', '·åç·àù·åÉ', '·äÆ·à®·â•·â≥', '·ä†·ã≠·å•', '·ä†·à≥', '·ä†·ãç·à¨'],
        'exerciseGenerator': _generateAnimalExercises,
      },
      {
        'title': '–û–¥–µ–∂–¥–∞',
        'description': '–ò–∑—É—á–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–¥–µ–∂–¥—ã –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–û–¥–µ–∂–¥–∞',
        'vocabulary': ['·à∏·àö·ãù', '·å´·àõ', '·â¶·â≥', '·ä´·â£', '·à±·à™', '·ä†·àç·â£·à≥·âµ', '·ä†·àç·â£·à≥·âµ', '·å®·à≠·âÖ'],
        'exerciseGenerator': _generateClothingExercises,
      },
      {
        'title': '–í—Ä–µ–º—è –∏ –¥–Ω–∏',
        'description': '–ò–∑—É—á–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω–µ–π –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–í—Ä–µ–º—è',
        'vocabulary': ['·à∞·ä†·âµ', '·âÄ·äï', '·à≥·àù·äï·âµ', '·ãà·à≠', '·ãì·àò·âµ', '·ä†·àÅ·äï', '·ä†·àÅ·äï', '·ä†·àÅ·äï'],
        'exerciseGenerator': _generateTimeExercises,
      },
      {
        'title': '–ü–æ–≥–æ–¥–∞',
        'description': '–ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–≥–æ–¥–æ–π –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ü–æ–≥–æ–¥–∞',
        'vocabulary': ['·çÄ·àê·ã≠', '·ãù·äì·â•', '·äï·çã·àµ', '·â†·à®·ã∂', '·ã∞·àò·äì', '·àô·âÄ·âµ', '·âÄ·ãù·âÉ·ãõ', '·ä†·ã®·à≠'],
        'exerciseGenerator': _generateWeatherExercises,
      },
      {
        'title': '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã',
        'description': '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ì–ª–∞–≥–æ–ª—ã',
        'vocabulary': ['·àò·àÑ·ãµ', '·àò·àù·å£·âµ', '·àò·â•·àã·âµ', '·àò·å†·å£·âµ', '·àò·â∞·äõ·âµ', '·àò·äê·à≥·âµ', '·àò·àµ·à´·âµ', '·àò·å´·ãà·âµ'],
        'exerciseGenerator': _generateVerbExercises,
      },
      {
        'title': '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ',
        'description': '–ò–∑—É—á–∏—Ç–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ü—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ',
        'vocabulary': ['·âµ·àç·âÖ', '·âµ·äï·àΩ', '·àò·àç·ä´·àù', '·àò·å•·çé', '·çà·å£·äï', '·ãù·åç·â∞·äõ', '·âÄ·àã·àç', '·ä†·àµ·â∏·åã·à™'],
        'exerciseGenerator': _generateAdjectiveExercises,
      },
    ];

    // Generate 100 beginner lessons by repeating and varying the templates
    List<lesson_model.Lesson> lessons = [];
    
    for (int i = 0; i < 100; i++) {
      final template = lessonTemplates[i % lessonTemplates.length];
      final lessonNumber = i + 1;
      
      lessons.add(lesson_model.Lesson(
        id: 'ru_beginner_$lessonNumber',
        title: '${template['title']}${lessonNumber > 12 ? ' ($lessonNumber)' : ''}',
        description: template['description'],
        level: lesson_model.LanguageLevel.beginner,
        languageCode: 'ru',
        estimatedMinutes: 8,
        xpReward: 100,
        category: template['category'],
        exercises: (template['exerciseGenerator'] as Function)(),
        vocabulary: List<String>.from(template['vocabulary']),
      ));
    }
    
    return lessons;
  }

  List<lesson_model.Lesson> _generateRussianBeginnerLessonsOld() {
    return [
      lesson_model.Lesson(
        id: 'ru_beginner_1',
        title: '–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è',
        description: '–ò–∑—É—á–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º',
        level: lesson_model.LanguageLevel.beginner,
        languageCode: 'ru',
        estimatedMinutes: 6,
        xpReward: 100,
        category: 'Basics',
        exercises: _generateGreetingExercises(),
        vocabulary: ['·à∞·àã·àù', '·ä•·äï·ã¥·âµ ·äì·âΩ·àÅ', '·ä•·äï·ã∞·àù·äï ·ä†·àà', '·â≥·ã≤·ã´·àµ', '·ä•·äï·ã∞·àù·äï ·ä†·àà·âΩ'],
      ),
      
      lesson_model.Lesson(
        id: 'ru_beginner_2',
        title: '–ß–∏—Å–ª–∞ 1-10',
        description: '–ù–∞—É—á–∏—Ç–µ—Å—å —Å—á–∏—Ç–∞—Ç—å –æ—Ç 1 –¥–æ 10 –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º',
        level: lesson_model.LanguageLevel.beginner,
        languageCode: 'ru',
        estimatedMinutes: 6,
        xpReward: 100,
        category: 'Numbers',
        exercises: _generateNumberExercises(),
        vocabulary: ['·ä†·äï·ãµ', '·àÅ·àà·âµ', '·à∂·àµ·âµ', '·ä†·à´·âµ', '·ä†·àù·àµ·âµ', '·àµ·ãµ·àµ·âµ', '·à∞·â£·âµ', '·àµ·àù·äï·âµ', '·ãò·å†·äù', '·ä†·àµ·à≠'],
      ),
      
      lesson_model.Lesson(
        id: 'ru_beginner_3',
        title: '–ß–ª–µ–Ω—ã —Å–µ–º—å–∏',
        description: '–ò–∑—É—á–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º',
        level: lesson_model.LanguageLevel.beginner,
        languageCode: 'ru',
        estimatedMinutes: 6,
        xpReward: 100,
        category: 'Family',
        exercises: _generateFamilyExercises(),
        vocabulary: ['·ä†·â£·âµ', '·ä•·äì·âµ', '·ãà·äï·ãµ·àù', '·ä•·àÖ·âµ', '·àç·åÖ', '·ãà·àã·åÖ'],
      ),
    ];
  }

  List<lesson_model.Lesson> _generateRussianIntermediateLessons() {
    // Generate 50 intermediate lessons efficiently in Russian
    final List<Map<String, dynamic>> intermediateTemplates = [
      {
        'title': '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        'description': '–ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏ –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
        'vocabulary': ['·àò·ä™·äì', '·ä†·ãç·àÆ·çï·àã·äï', '·â£·â°·à≠', '·ä†·ãç·â∂·â°·àµ', '·â≥·ä≠·à≤', '·àò·äï·åà·ãµ', '·àò·å†·å£·âµ', '·àò·å†·å£·âµ'],
        'exerciseGenerator': _generateTravelExercises,
      },
      {
        'title': '–ü–æ–∫—É–ø–∫–∏ –∏ –¥–µ–Ω—å–≥–∏',
        'description': '–ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å –ø–æ–∫—É–ø–æ–∫ –∏ –¥–µ–Ω–µ–≥ –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ü–æ–∫—É–ø–∫–∏',
        'vocabulary': ['·åà·äï·ãò·â•', '·ãã·åã', '·åà·ã¢', '·àª·å≠', '·à±·âÖ', '·àò·åç·ãõ·âµ', '·àò·à∏·å•', '·âÖ·äì·àΩ'],
        'exerciseGenerator': _generateShoppingExercises,
      },
      {
        'title': '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞',
        'description': '–ò–∑—É—á–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω—ã –∑–¥–æ—Ä–æ–≤—å—è –∏ –º–µ–¥–∏—Ü–∏–Ω—ã –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ó–¥–æ—Ä–æ–≤—å–µ',
        'vocabulary': ['·àÖ·àò·àù', '·ã∂·ä≠·â∞·à≠', '·àÜ·àµ·çí·â≥·àç', '·àò·ãµ·àÉ·äí·âµ', '·å§·äì', '·àÖ·àò·àù', '·àò·çà·ãà·àµ', '·àò·çà·ãà·àµ'],
        'exerciseGenerator': _generateHealthExercises,
      },
      {
        'title': '–†–∞–±–æ—Ç–∞ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏',
        'description': '–ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–†–∞–±–æ—Ç–∞',
        'vocabulary': ['·àµ·à´', '·à∞·à´·â∞·äõ', '·ä†·àµ·â∞·ã≥·ã≥·à™', '·àò·àù·àÖ·à≠', '·àò·àù·àÖ·à≠', '·àò·àù·àÖ·à≠', '·àò·àù·àÖ·à≠', '·àò·àù·àÖ·à≠'],
        'exerciseGenerator': _generateWorkExercises,
      },
      {
        'title': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ —à–∫–æ–ª–∞',
        'description': '–ò–∑—É—á–∏—Ç–µ —Å–ª–æ–≤–∞—Ä—å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        'vocabulary': ['·âµ·àù·àÖ·à≠·âµ', '·âµ·àù·àÖ·à≠·âµ ·â§·âµ', '·àò·åΩ·àê·çç', '·àò·åΩ·àê·çç', '·àò·åΩ·àê·çç', '·àò·åΩ·àê·çç', '·àò·åΩ·àê·çç', '·àò·åΩ·àê·çç'],
        'exerciseGenerator': _generateEducationExercises,
      },
    ];

    List<lesson_model.Lesson> lessons = [];
    
    for (int i = 0; i < 50; i++) {
      final template = intermediateTemplates[i % intermediateTemplates.length];
      final lessonNumber = i + 1;
      
      lessons.add(lesson_model.Lesson(
        id: 'ru_intermediate_$lessonNumber',
        title: '${template['title']} ($lessonNumber)',
        description: template['description'],
        level: lesson_model.LanguageLevel.intermediate,
        languageCode: 'ru',
        estimatedMinutes: 10,
        xpReward: 150,
        category: template['category'],
        exercises: (template['exerciseGenerator'] as Function)(),
        vocabulary: List<String>.from(template['vocabulary']),
      ));
    }
    
    return lessons;
  }

  List<lesson_model.Lesson> _generateRussianAdvancedLessons() {
    // Generate 30 advanced lessons efficiently in Russian
    final List<Map<String, dynamic>> advancedTemplates = [
      {
        'title': '–ë–∏–∑–Ω–µ—Å –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞',
        'description': '–ò–∑—É—á–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω—ã –±–∏–∑–Ω–µ—Å–∞ –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ë–∏–∑–Ω–µ—Å',
        'vocabulary': ['·äï·åç·ãµ', '·ä¢·äÆ·äñ·àö', '·åà·äï·ãò·â•', '·åà·äï·ãò·â•', '·åà·äï·ãò·â•', '·åà·äï·ãò·â•', '·åà·äï·ãò·â•', '·åà·äï·ãò·â•'],
        'exerciseGenerator': _generateBusinessExercises,
      },
      {
        'title': '–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
        'description': '–ò–∑—É—á–∏—Ç–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∏ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ',
        'category': '–ü–æ–ª–∏—Ç–∏–∫–∞',
        'vocabulary': ['·çñ·àà·â≤·ä´', '·àò·äï·åç·àµ·âµ', '·çï·à¨·ãö·ã≥·äï·âµ', '·çï·à¨·ãö·ã≥·äï·âµ', '·çï·à¨·ãö·ã≥·äï·âµ', '·çï·à¨·ãö·ã≥·äï·âµ', '·çï·à¨·ãö·ã≥·äï·âµ', '·çï·à¨·ãö·ã≥·äï·âµ'],
        'exerciseGenerator': _generatePoliticsExercises,
      },
    ];

    List<lesson_model.Lesson> lessons = [];
    
    for (int i = 0; i < 30; i++) {
      final template = advancedTemplates[i % advancedTemplates.length];
      final lessonNumber = i + 1;
      
      lessons.add(lesson_model.Lesson(
        id: 'ru_advanced_$lessonNumber',
        title: '${template['title']} ($lessonNumber)',
        description: template['description'],
        level: lesson_model.LanguageLevel.advanced,
        languageCode: 'ru',
        estimatedMinutes: 12,
        xpReward: 200,
        category: template['category'],
        exercises: (template['exerciseGenerator'] as Function)(),
        vocabulary: List<String>.from(template['vocabulary']),
      ));
    }
    
    return lessons;
  }

  // Missing exercise generators
  List<lesson_model.Exercise> _generateColorExercises() {
    return [
      lesson_model.Exercise(
        id: 'color_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ö—Ä–∞—Å–Ω—ã–π" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·âÄ·ã≠',
        translation: '–ö—Ä–∞—Å–Ω—ã–π',
        options: [
          lesson_model.ExerciseOption(text: '·âÄ·ã≠', isCorrect: true),
          lesson_model.ExerciseOption(text: '·äê·å≠', isCorrect: false),
          lesson_model.ExerciseOption(text: '·å•·âÅ·à≠', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateFoodExercises() {
    return [
      lesson_model.Exercise(
        id: 'food_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–í–æ–¥–∞" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·ãç·àÉ',
        translation: '–í–æ–¥–∞',
        options: [
          lesson_model.ExerciseOption(text: '·ãç·àÉ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·ä•·äï·åÄ·à´', isCorrect: false),
          lesson_model.ExerciseOption(text: '·â°·äì', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateBodyPartExercises() {
    return [
      lesson_model.Exercise(
        id: 'body_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–†—É–∫–∞" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·ä•·åÖ',
        translation: '–†—É–∫–∞',
        options: [
          lesson_model.ExerciseOption(text: '·ä•·åÖ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·ä•·åç·à≠', isCorrect: false),
          lesson_model.ExerciseOption(text: '·ä†·ã≠·äï', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateAnimalExercises() {
    return [
      lesson_model.Exercise(
        id: 'animal_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–°–æ–±–∞–∫–∞" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·ãç·àª',
        translation: '–°–æ–±–∞–∫–∞',
        options: [
          lesson_model.ExerciseOption(text: '·ãç·àª', isCorrect: true),
          lesson_model.ExerciseOption(text: '·ãµ·à≠', isCorrect: false),
          lesson_model.ExerciseOption(text: '·ä†·àÖ·ã´', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateClothingExercises() {
    return [
      lesson_model.Exercise(
        id: 'clothing_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–†—É–±–∞—à–∫–∞" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·à∏·àö·ãù',
        translation: '–†—É–±–∞—à–∫–∞',
        options: [
          lesson_model.ExerciseOption(text: '·à∏·àö·ãù', isCorrect: true),
          lesson_model.ExerciseOption(text: '·å´·àõ', isCorrect: false),
          lesson_model.ExerciseOption(text: '·â¶·â≥', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateTimeExercises() {
    return [
      lesson_model.Exercise(
        id: 'time_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ß–∞—Å" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·à∞·ä†·âµ',
        translation: '–ß–∞—Å',
        options: [
          lesson_model.ExerciseOption(text: '·à∞·ä†·âµ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·âÄ·äï', isCorrect: false),
          lesson_model.ExerciseOption(text: '·à≥·àù·äï·âµ', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateWeatherExercises() {
    return [
      lesson_model.Exercise(
        id: 'weather_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–°–æ–ª–Ω—Ü–µ" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·çÄ·àê·ã≠',
        translation: '–°–æ–ª–Ω—Ü–µ',
        options: [
          lesson_model.ExerciseOption(text: '·çÄ·àê·ã≠', isCorrect: true),
          lesson_model.ExerciseOption(text: '·ãù·äì·â•', isCorrect: false),
          lesson_model.ExerciseOption(text: '·äï·çã·àµ', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateVerbExercises() {
    return [
      lesson_model.Exercise(
        id: 'verb_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ò–¥—Ç–∏" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·àò·àÑ·ãµ',
        translation: '–ò–¥—Ç–∏',
        options: [
          lesson_model.ExerciseOption(text: '·àò·àÑ·ãµ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·àò·àù·å£·âµ', isCorrect: false),
          lesson_model.ExerciseOption(text: '·àò·â•·àã·âµ', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateAdjectiveExercises() {
    return [
      lesson_model.Exercise(
        id: 'adjective_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ë–æ–ª—å—à–æ–π" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·âµ·àç·âÖ',
        translation: '–ë–æ–ª—å—à–æ–π',
        options: [
          lesson_model.ExerciseOption(text: '·âµ·àç·âÖ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·âµ·äï·àΩ', isCorrect: false),
          lesson_model.ExerciseOption(text: '·àò·àç·ä´·àù', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateTravelExercises() {
    return [
      lesson_model.Exercise(
        id: 'travel_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·åâ·ãû',
        translation: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
        options: [
          lesson_model.ExerciseOption(text: '·åâ·ãû', isCorrect: true),
          lesson_model.ExerciseOption(text: '·àò·ä™·äì', isCorrect: false),
          lesson_model.ExerciseOption(text: '·ä†·ãç·àÆ·çï·àã·äï', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateShoppingExercises() {
    return [
      lesson_model.Exercise(
        id: 'shopping_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ü–æ–∫—É–ø–∫–∏" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·åç·ãõ·âµ',
        translation: '–ü–æ–∫—É–ø–∫–∏',
        options: [
          lesson_model.ExerciseOption(text: '·åç·ãõ·âµ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·åà·äï·ãò·â•', isCorrect: false),
          lesson_model.ExerciseOption(text: '·ãã·åã', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateHealthExercises() {
    return [
      lesson_model.Exercise(
        id: 'health_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ó–¥–æ—Ä–æ–≤—å–µ" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·å§·äì',
        translation: '–ó–¥–æ—Ä–æ–≤—å–µ',
        options: [
          lesson_model.ExerciseOption(text: '·å§·äì', isCorrect: true),
          lesson_model.ExerciseOption(text: '·àÖ·àò·àù', isCorrect: false),
          lesson_model.ExerciseOption(text: '·ã∂·ä≠·â∞·à≠', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateWorkExercises() {
    return [
      lesson_model.Exercise(
        id: 'work_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–†–∞–±–æ—Ç–∞" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·àµ·à´',
        translation: '–†–∞–±–æ—Ç–∞',
        options: [
          lesson_model.ExerciseOption(text: '·àµ·à´', isCorrect: true),
          lesson_model.ExerciseOption(text: '·à∞·à´·â∞·äõ', isCorrect: false),
          lesson_model.ExerciseOption(text: '·ä†·àµ·â∞·ã≥·ã≥·à™', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateEducationExercises() {
    return [
      lesson_model.Exercise(
        id: 'education_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·âµ·àù·àÖ·à≠·âµ',
        translation: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
        options: [
          lesson_model.ExerciseOption(text: '·âµ·àù·àÖ·à≠·âµ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·âµ·àù·àÖ·à≠·âµ ·â§·âµ', isCorrect: false),
          lesson_model.ExerciseOption(text: '·àò·åΩ·àê·çç', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateBusinessExercises() {
    return [
      lesson_model.Exercise(
        id: 'business_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ë–∏–∑–Ω–µ—Å" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·äï·åç·ãµ',
        translation: '–ë–∏–∑–Ω–µ—Å',
        options: [
          lesson_model.ExerciseOption(text: '·äï·åç·ãµ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·ä¢·äÆ·äñ·àö', isCorrect: false),
          lesson_model.ExerciseOption(text: '·åà·äï·ãò·â•', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generatePoliticsExercises() {
    return [
      lesson_model.Exercise(
        id: 'politics_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–ü–æ–ª–∏—Ç–∏–∫–∞" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·çñ·àà·â≤·ä´',
        translation: '–ü–æ–ª–∏—Ç–∏–∫–∞',
        options: [
          lesson_model.ExerciseOption(text: '·çñ·àà·â≤·ä´', isCorrect: true),
          lesson_model.ExerciseOption(text: '·àò·äï·åç·àµ·âµ', isCorrect: false),
          lesson_model.ExerciseOption(text: '·çï·à¨·ãö·ã≥·äï·âµ', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateGreetingExercises() {
    return [
      lesson_model.Exercise(
        id: 'greeting_1',
        type: lesson_model.ExerciseType.selectImage,
        instruction: '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è "–ü—Ä–∏–≤–µ—Ç"',
        amharicText: '·à∞·àã·àù',
        translation: '–ü—Ä–∏–≤–µ—Ç',
        imageUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=300&fit=crop',
        options: [
          lesson_model.ExerciseOption(
            text: '–ü—Ä–∏–≤–µ—Ç',
            imageUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=300&fit=crop',
            isCorrect: true,
          ),
          lesson_model.ExerciseOption(
            text: '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è',
            imageUrl: 'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=300&h=300&fit=crop',
            isCorrect: false,
          ),
          lesson_model.ExerciseOption(
            text: '–°–ø–∞—Å–∏–±–æ',
            imageUrl: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=300&h=300&fit=crop',
            isCorrect: false,
          ),
          lesson_model.ExerciseOption(
            text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞',
            imageUrl: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=300&h=300&fit=crop',
            isCorrect: false,
          ),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateNumberExercises() {
    return [
      lesson_model.Exercise(
        id: 'number_1',
        type: lesson_model.ExerciseType.translate,
        instruction: '–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ "–û–¥–∏–Ω" –Ω–∞ –∞–º—Ö–∞—Ä—Å–∫–∏–π',
        amharicText: '·ä†·äï·ãµ',
        translation: '–û–¥–∏–Ω',
        options: [
          lesson_model.ExerciseOption(text: '·ä†·äï·ãµ', isCorrect: true),
          lesson_model.ExerciseOption(text: '·àÅ·àà·âµ', isCorrect: false),
          lesson_model.ExerciseOption(text: '·à∂·àµ·âµ', isCorrect: false),
          lesson_model.ExerciseOption(text: '·ä†·à´·âµ', isCorrect: false),
        ],
      ),
    ];
  }

  List<lesson_model.Exercise> _generateFamilyExercises() {
    return [
      lesson_model.Exercise(
        id: 'family_1',
        type: lesson_model.ExerciseType.selectImage,
        instruction: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è "–û—Ç–µ—Ü"',
        amharicText: '·ä†·â£·âµ',
        translation: '–û—Ç–µ—Ü',
        imageUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=300&fit=crop',
        options: [
          lesson_model.ExerciseOption(
            text: '–û—Ç–µ—Ü',
            imageUrl: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=300&h=300&fit=crop',
            isCorrect: true,
          ),
          lesson_model.ExerciseOption(
            text: '–ú–∞—Ç—å',
            imageUrl: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=300&h=300&fit=crop',
            isCorrect: false,
          ),
          lesson_model.ExerciseOption(
            text: '–ë—Ä–∞—Ç',
            imageUrl: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=300&h=300&fit=crop',
            isCorrect: false,
          ),
          lesson_model.ExerciseOption(
            text: '–°–µ—Å—Ç—Ä–∞',
            imageUrl: 'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=300&h=300&fit=crop',
            isCorrect: false,
          ),
        ],
      ),
    ];
  }
}
